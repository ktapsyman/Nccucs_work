import numpy as np
import pandas as pd
import matplotlib as mpl
import seaborn as sb

from Classifiers import *

Classifiers = [
    KNeighborsClassifier(3),
    SVC(probability=True),
    DecisionTreeClassifier(),
    RandomForestClassifier(),
	AdaBoostClassifier(),
    GradientBoostingClassifier(),
    GaussianNB(),
    LinearDiscriminantAnalysis(),
    QuadraticDiscriminantAnalysis(),
    LogisticRegression()]

def ShowFeature(TrainingData, FeatureName):
	print("======================%s========================" % FeatureName)
	print(TrainingData[[FeatureName, "Survived"]].groupby([FeatureName], as_index=False).mean())


def ReadTrainingData(Filepath):
	return pd.read_csv(Filepath)

def ReadTestingData(Filepath):
	return pd.read_csv(Filepath)

def ProcessSex(Data):
	Data["Sex"] = Data["Sex"].map({"male":0, "female":1}).astype(int)
	return

def ProcessFare(Data):
	Data["Fare"] = Data["Fare"].fillna(Data["Fare"].median())
	Data.loc[(Data["Fare"] <= 15.0), "Fare"] = 0
	Data.loc[(Data["Fare"] > 15.0) & (Data["Fare"] <= 70.0), "Fare"] = 1
	Data.loc[(Data["Fare"] > 70.0), "Fare"] = 2
	Data["Fare"] = Data["Fare"].astype(int)
	return

def ProcessCabin(Data):
	Data = Data.assign(CabinsClass=pd.Series([str(cabin)[0] for cabin in Data["Cabin"]]).values)
	Data["CabinsClass"] = Data["CabinsClass"].map(lambda cabin:ord(cabin)-ord('A')).astype(int)
	return

def ProcessEmbarked(Data):
	Data["Embarked"] = Data["Embarked"].fillna("S").map({"C":0, "Q":1, "S":2}).astype(int)

def Preprocess(Data):
	ProcessSex(Data)
	ProcessCabin(Data)
	ProcessFare(Data)
	ProcessEmbarked(Data)
	
	"""
	PassengerId    891 non-null int64
	Survived       891 non-null int64
	Pclass         891 non-null int64
	Name           891 non-null object
	Sex            891 non-null object
	Age            714 non-null float64
	SibSp          891 non-null int64
	Parch          891 non-null int64
	Ticket         891 non-null object
	Fare           891 non-null float64
	Cabin          204 non-null object
	Embarked       889 non-null object
	"""
	DropList = ["Name", "Age", "SibSp", "Parch", "Ticket"]
	Data = Data.drop(DropList, axis=1).values
	return

def GenerateOutputFile(Model):
	return
	

if __name__ == '__main__':
	TrainingData = ReadTrainingData("./train.csv")
	TestingData = ReadTestingData("./test.csv")
	
	Preprocess(TrainingData)
	
	Spliter = StratifiedShuffleSplit(n_splits=10, test_size=0.1, random_state=0)
	Features = TrainingData[0::, 1::]
	Labels = TrainingData[0::, 0]
	
	ResultDict = {}
	for TrainIndex, TestIndex in Spliter.split(Features, Labels):
		
